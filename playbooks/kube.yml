#
# OCNE Deployment Tool
#
# Copyright (c) 2020,2021 Oracle and/or its affiliates.
# Licensed under the Universal Permissive License v 1.0 as shown at
# https://oss.oracle.com/licenses/upl.
#
# Description: Ansible playbook to configure
# network pre-requisites and install required packages for OCNE.
#
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
# yamllint disable

---

- name: Install OCNE on Kubernetes Nodes
  hosts: ocne_kube_control ocne_kube_worker
  become: yes
  gather_facts: false

  tasks:

  - name: Enable firewalld Service
    service:
      name: firewalld
      enabled: yes
      state: started

  - name: Set iptables to FORWARD ACCEPT
    iptables:
      chain: FORWARD
      jump: ACCEPT

  - name: Open Port 10250
    firewalld:
      port: 10250/tcp
      permanent: yes
      state: enabled

  - name: Open Port 10255
    firewalld:
      port: 10255/tcp
      permanent: yes
      state: enabled

  - name: Open Port 8472
    firewalld:
      port: 8472/udp
      permanent: yes
      state: enabled

  - name: Open Port 8090
    firewalld:
      port: 8090/tcp
      permanent: yes
      state: enabled

  - name: Open Port 6443
    firewalld:
      port: 6443/tcp
      permanent: yes
      state: enabled

  - name: Open Port 2379
    firewalld:
      port: 2379/tcp
      permanent: yes
      state: enabled

  - name: Open Port 10251
    firewalld:
      port: 10251/tcp
      permanent: yes
      state: enabled

  - name: Open Port 10252
    firewalld:
      port: 10252/tcp
      permanent: yes
      state: enabled

  - name: Open Port 2380
    firewalld:
      port: 2380/tcp
      permanent: yes
      state: enabled

  - name: Enable VRRP
    shell: |
           firewall-cmd --add-protocol=vrrp
           firewall-cmd --add-protocol=vrrp --permanent

## Newer versions of OCNE do not require masquerading to be enabled.
  - name: Enable masquerade
    shell: |
           firewall-cmd --add-masquerade --permanent
    when:
    - ocne_version | regex_search("^-1\.[1-2]\.[0-9]$")


  - name: Restart firewalld
    service:
      name: firewalld
      state: restarted
      enabled: yes

  - name: Put SELinux in enforcing Mode
    selinux:
      policy: targeted
      state: enforcing

  - name: Disable SWAP for Kubernetes
    shell: |
           swapoff -a

  - name: Remove SWAP from /etc/fstab
    lineinfile:
      path: /etc/fstab
      regexp: '^\/dev\/mapper\/vg\_main\-lv\_swap'
      line: '/dev/mapper/vg_main-lv_swap none                    swap    defaults        0 0'
      state: absent

  - name: Run Modprobe
    shell: |
           modprobe br_netfilter

  - name: Set sysctl parameters
    shell: |
           touch /etc/sysctl.d/k8s.conf;echo 'net.bridge.bridge-nf-call-ip6tables = 1' >> /etc/sysctl.d/k8s.conf;echo 'net.bridge.bridge-nf-call-iptables = 1' >> /etc/sysctl.d/k8s.conf;echo 'net.ipv4.ip_forward = 1' >> /etc/sysctl.d/k8s.conf;sysctl -p /etc/sysctl.d/k8s.conf;echo "br_netfilter" > /etc/modules-load.d/br_netfilter.conf

  - name: Install the olcne-agent olcne-utils packages
    become: yes
    shell: |
           yum install -y olcne-agent{{ ocne_version }} olcne-utils{{ ocne_version}}

  - name: Enable olcne-agent Service
    service:
      name: olcne-agent
      enabled: yes
      state: stopped

  - name: Create CRIO Proxy Directory
    file:
      path: /etc/systemd/system/crio.service.d
      state: directory
    when:
    - use_proxy == true

  - name: Create CRIO Proxy File
    shell: |
            touch /etc/systemd/system/crio.service.d/proxy.conf; echo "[Service]" >> /etc/systemd/system/crio.service.d/proxy.conf; echo "Environment=\"HTTPS_PROXY={{ my_https_proxy }}\"" >> /etc/systemd/system/crio.service.d/proxy.conf; echo "Environment=\"HTTP_PROXY={{ my_http_proxy }}\"" >> /etc/systemd/system/crio.service.d/proxy.conf;echo "Environment=\"NO_PROXY={{ my_no_proxy }}\"" >> /etc/systemd/system/crio.service.d/proxy.conf
    when:
    - use_proxy == true
